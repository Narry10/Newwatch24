name: Docker Build and Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  NODE_ENV: production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/post-ssr
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=commit-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: echo "Image digest:" ${{ steps.build.outputs.digest }}

  # Job để test Docker image sau khi build
  test-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Test Docker image
        run: |
          # Pull và chạy container
          docker run --rm -d -p 3000:3000 --name test-container \
            -e NODE_ENV=production \
            ${{ secrets.DOCKER_USERNAME }}/post-ssr:commit-${{ github.sha }}
          
          # Đợi container khởi động
          sleep 30
          
          # Test Node.js version
          echo "Testing Node.js installation..."
          if ! docker exec test-container node --version; then
            echo "Node.js check failed"
            docker logs test-container
            exit 1
          fi
          
          # Test environment variables
          echo "Testing environment variables..."
          docker exec test-container printenv | grep -E "(NODE_ENV|PORT)" || echo "ENV vars not found"
          
          # Test application health
          echo "Testing application health..."
          if docker exec test-container ps aux | grep -q node; then
            echo "Application is running"
          else
            echo "Application is not running"
            docker logs test-container
            exit 1
          fi
          
          # Test HTTP endpoint if available
          echo "Testing HTTP endpoint..."
          if curl -f http://localhost:3000 || curl -f http://localhost:3000/health; then
            echo "HTTP endpoint accessible"
          else
            echo "HTTP endpoint test failed (may be expected if no health endpoint)"
          fi
          
          # Cleanup
          docker stop test-container || true